# Default values for matrix-synapse.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  registry: docker.io
  repository: matrixdotorg/synapse
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
synapse:
  extraCommands: {}
config:
  # This sets the public-facing domain of the server.
  # The server_name name will appear at the end of usernames and room addresses created on your server. For example if the server_name was example.com, usernames on your server would be in the format @user:example.com
  # In most cases you should avoid using a matrix specific subdomain such as matrix.example.com or synapse.example.com as the server_name for the same reasons you wouldn't use user@email.example.com as your email address. See here for information on how to host Synapse on a subdomain while preserving a clean server_name.
  # The server_name cannot be changed later so it is important to configure this correctly before you start Synapse. It should be all lowercase and may contain an explicit port.
  serverName: synapse.example.com
  # The public-facing base URL that clients use to access this Homeserver (not including _matrix/...). This is the same URL a user might enter into the 'Custom Homeserver URL' field on their client. If you use Synapse with a reverse proxy, this should be the URL to reach Synapse via the proxy. Otherwise, it should be the URL to reach Synapse's client HTTP listener (see 'listeners' below).
  # Defaults to https://<server_name>/.
  publicBaseurl:
  webClientLocation:
  # By default, other servers will try to reach our server on port 8448, which can be inconvenient in some environments.
  # This option currently defaults to false.
  serveServerWellknown: true
  softFileLimit: 0
  reportStats: false
  mediaStore:
    enabled: true
    persistence:
      enabled: true
      size: 5Gi
      accessMode: ReadWriteOnce
  registration:
    enabled: false
    withoutVerification: false
  database:
    txnLimit: 0
    cpMin: 5
    cpMax: 10
  trustedKeyServers:
    - server_name: "matrix.org"
  registrationSharedSecret:
    existingSecret: synapse-registration-secret
  macaroonSecretKey:
    enabled: true
    existingSecret: synapse-macaroon-secret
  turn:
    enabled: false
    existingSecret: synapse-turn-secret
  email:
    enabled: false
    existingSecret: synapse-mail-secret
    forceTLS: true
    requireTransportSecurity: true
    enableTLS: true
    notifFrom: "Your Friendly %(app)s homeserver <noreply@example.com>"
    enableNotifs: true
    client_base_url: "http://localhost/riot"
  captcha:
    enabled: false
    existingSecret: synapse-captcha-secret

extraConfig: {}

## The source of the signing key used by Synapse in federation.
##
signingkey:
  ## Enable a Kubernetes job to generate and store a signing key if one does not
  ## exist.
  ## If you have already run a Matrix server at some point on your domain then
  ## you will want to keep the old signing key, either by using the `existingSecret`
  ## configuration, or by including the old key under `extraConfig.old_signing_keys`
  ##
  ## If you lose your signing key then any federation traffic from your instance
  ## might not be trusted any more by the wider network.
  ##
  job:
    enabled: true

    generateImage:
      repository: docker.io
      image: matrixdotorg/synapse
      #tag: latest
      pullPolicy: IfNotPresent

    publishImage:
      repository: docker.io
      image: bitnami/kubectl
      # tag: latest
      pullPolicy: IfNotPresent

  ## Specify an existing signing key secret, will need to be created in advance.
  ##
  # existingSecret:
  # existingSecretKey: signing.key

  ## Resources to apply to the signing key generation job
  ##
  resources: {}
  #  limits:
  #    cpu: 500m
  #    memory: 2048Mi
  #  requests:
  #    cpu: 1000m
  #    memory: 2048Mi

sqlite:
  enabled: false
  persistence:
    enabled: true
    size: 5Gi
    accessMode: ReadWriteOnce

externalPostgresql:
  enabled: true
  host: postgresql.postgresql.svc.cluster.local
  port: 5432
  database: synapse
  existingSecret: synapse-postgresql-secret

redis:
  enabled: true
  auth:
    enabled: true
    existingSecret: synapse-redis-secret
    existingSecretPasswordKey: redis-pass
  architecture: standalone
  master:
    persistence:
      enabled: false
      size: "8Gi"
    service:
      ports:
        redis: "6379"

metrics:
  enabled: false
  serviceMonitor:
    enabled: false
  prometheusRule:
    enabled: false
    rules:
      # This is just an Example how to create a Rule
      # - alert: federationSoftFailed
      #   expr: synapse_federation_soft_failed_events_total < 0
      #   for: 15m
      #   labels:
      #     severity: warning
      #   annotations:
      #     summary: "S3 Blobstorage saveByte has hickUps. Have a look at https://grafana-global.kim.akquinet.nx2.dev for the Subscription(see alertmanager as hint)"
      #     description: "saving to S3 takes too long for some Instances\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"

networkPolicies:
  enabled: true

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000
  runAsGroup: 1000
  runAsUser: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  # readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  http:
    port: 8008
  replication:
    port: 9093
  metrics:
    port: 9090

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: letsencrypt-prod
    # nginx.ingress.kubernetes.io/use-regex: "true"
    # kubernetes.io/tls-acme: "true"
    # nginx.ingress.kubernetes.io/configuration-snippet: |
    #   add_header X-Frame-Options "sameorigin";
    #   add_header X-Content-Type-Options nosniff;
    #   add_header Referrer-Policy 'same-origin';
    #   add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()";
  hosts:
    - host: chart-example.local
      paths:
        - path: /_matrix/
          pathType: ImplementationSpecific
        - path: /_synapse/client/
          pathType: ImplementationSpecific
        - path: /.well-known/matrix/
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: tls-synapse-general
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    memory: 2048Mi
    cpu: 1000m
  requests:
    memory: 2048Mi
    cpu: 1000m

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
