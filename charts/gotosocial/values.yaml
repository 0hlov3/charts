# Default values for gotosocial.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

refactoringAccepted: "yes"

replicaCount: 1

image:
  registry: docker.io
  repository: superseriousbusiness/gotosocial
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # cert-manager.io/cluster-issuer: "letsencrypt"
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: tls-gotosocial-general
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 500m
    memory: 512Mi

gotosocial:
  strategy:
    type: Recreate
  persistence:
    enabled: false
    accessMode: "ReadWriteOnce"
    size: "10Gi"
    #storageClass: ""
  tmpfs:
    enabled: false
    size: "1Gi"
  config:
    applicationName: "gotosocial"
    host: ""
    accountDomain: ""
    protocol: "https"
    bindAddress: "0.0.0.0"
    trustedProxies:
      - "::1"
      - "10.0.0.0/8"
      - "172.16.0.0/12"
      - "192.168.0.0/16"
    db: # general db config, for postgres or sqlite specific config scroll down.
      maxOpenConnsMultiplier: "8"
      cache:
        memoryTarget: "100MiB"
    storage:
      backend: "local"
      localBasePath: "/gotosocial/storage"
      s3:
       enabled: false
       endpoint: ""
       proxy: false
       useSSL: true
       accessKey: ""
       secretKey: ""
       # If this is set, accessKey, secretKey will not take place
       # Needs the S3_ACCESS_KEY_ID and S3_SECRET_ACCESS_KEY keys.
       existingSecret: ""
       bucket: ""
    oidc:
      enabled: false
      idpName: ""
      skipVerification: ""
      issuer: ""
      clientID: ""
      clientSecret: ""
      oidcScopes:
        - "openid"
        - "email"
        - "profile"
        - "groups"
      linkExisting: false
      adminGroups: []
    smtp:
      host: ""
      port: "0"
      userName: ""
      password: ""
      existingSecretName: ""
      existingSecretKey: ""
      from: ""
      discloseRecipients: false
  extraConfig:
    # logLevel: "info"
    #  metrics:
    #    enabled: false
    #    authEnabled: false
    #    authUsername: ""
    #    authPassword: ""

initContainers: []
  # - name: init-myservice
  #   image: busybox:1.28
  #   command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]

postgresql:
  enabled: false
  image:
    pullPolicy: Always
  auth:
    username: "gotosocial"
    # password:
    database: "gotosocial"
    existingSecret: gts-postgresql-secret
  primary:
    persistence:
      enabled: true
      # existingClaim:
      # storageClass:
      size: 10Gi
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 512Mi
  volumePermissions:
    enabled: false

externalPostgresql:
  enabled: false
  host: postgres.postgres.svc.local
  port: 5432
  ## The name of an existing secret with postgresql credentials
  username: ""
  ## Password key to be retrieved from existing secret
  password: ""
  ## The name of an existing secret with postgresql credentials
  existingSecret: ""
  ## Password key to be retrieved from existing secret
  existingSecretPasswordKey: postgres-password
  ## TLS Mode
  tls_mode: disable
  ## CA Cert to use when tls mode is in required state
  ca_cert: ""
  database: GoToSocial

sqLite:
  address: "/gotosocial/storage/sqlite.db"
  journalMode: "WAL"
  synchronous: "NORMAL"
  cacheSize: "8MiB"
  busyTimeout: "30m"
  tmpdir: "" # "/gotosocial/storage/"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

securityContext:
  capabilities:
    drop: 
      - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000

startupProbe:
  httpGet:
    path: /
    port: http
  failureThreshold: 60
  periodSeconds: 10
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http
  failureThreshold: 5

nodeSelector: {}

tolerations: []

affinity: {}
